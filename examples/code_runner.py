from llm_sandbox import SandboxSession\\\\nfrom typing import List\\\\n\\\\nclass SandboxSession:\\\\\\n    def __init__(self, lang: str, keep_template: bool, verbose: bool):\\\\\\n        self.lang = lang\\\\n        self.keep_template = keep_template\\\\n        self.verbose = verbose\\\\n\\\\n    def run(self, code: str, libraries: List[str] = None):\\\\\\n        if libraries:\\\\n            self.execute_command(' '.join(['pip install'] + libraries))\\\\n        return self.execute_command(code)\\\\n\\\\n    def execute_command(self, command: str):\\\\\\n        if self.lang == 'python':\\\\n            return self.execute_python_command(command)\\\\n        elif self.lang == 'java':\\\\n            return self.execute_java_command(command)\\\\n        elif self.lang == 'javascript':\\\\n            return self.execute_javascript_command(command)\\\\n        elif self.lang == 'cpp':\\\\n            return self.execute_cpp_command(command)\\\\n        else:\\\\n            raise ValueError(f'Language {self.lang} is not supported')\\\\n\\\\n    def execute_python_command(self, command: str):\\\\\\n        if self.keep_template:\\\\n            command = 'import os\n' + command\\\\n        return exec(command)\\\\n\\\\n    def execute_java_command(self, command: str):\\\\\\n        if self.keep_template:\\\\n            command = 'public class Main {\n' + command + '\n}'\n        return os.system(f'javac Main.java && java Main')\\\\n\\\\n    def execute_javascript_command(self, command: str):\\\\\\n        if self.keep_template:\\\\n            command = 'const ' + command\\\\n        return os.system(f'node {command}')\\\\n\\\\n    def execute_cpp_command(self, command: str):\\\\\\n        if self.keep_template:\\\\n            command = '#include <iostream>\n' + command + '\n'\\\\n        with open('main.cpp', 'w') as f:\\\\n            f.write(command)\\\\n        return os.system('g++ main.cpp -o a.out && ./a.out')\\\\n\\\\nif __name__ == '__main__':\\\\n    import os\\\\n    os.system('clear')\\\\n    run_cpp_code()\\\\n\\\\n\\\\ndef run_cpp_code():\\\\n    with SandboxSession(lang='cpp', keep_template=True, verbose=True) as session:\\\\n        output = session.run('\n#include <iostream>\nint main() {\n    std::cout << "Hello, World!" << std::endl;\n    return 0;\n}')\\\\n        print(output)\\\\n\\\\n        output = session.run('\n#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    for (int i : v) {\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n    return 0;\n}')\\\\n        print(output)\\\\n\\\\n        output = session.run('\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    std::reverse(v.begin(), v.end());\n    for (int i : v) {\n        std::cout << i << " ";\n    }\n    std::cout << std::endl;\n    return 0;\n}', libraries=['libstdc++'])\\\\n        print(output)\\\\n