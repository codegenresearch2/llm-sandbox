import docker\\\nimport docker.errors\\\nfrom typing import List, Optional\\\n\\nfrom docker import DockerClient\\\nfrom llm_sandbox.const import SupportedLanguage\\\\\n\\n\\ndef image_exists(client: DockerClient, image: str) -> bool:\\\"""\\\\\nCheck if a Docker image exists\\\\\n:param client: Docker client\\\\\n:param image: Docker image\\\\\n:return: True if the image exists, False otherwise\\\"\\\"\\\\\n    try:\\\\\n        client.images.get(image)\\\\\n        return True\\\\\n    except docker.errors.ImageNotFound:\\\\\n        return False\\\\\n    except Exception as e:\\\\\n        raise e\\\"\\\"\\\\\n\\\\ndef get_libraries_installation_command(lang: str, libraries: List[str]) -> Optional[str]:\\\"""\\\\\nGet the command to install libraries for the given language\\\\\n:param lang: Programming language\\\\\n:param libraries: List of libraries\\\\\n:return: Installation command\\\"\\\"\\\\\n    if lang == SupportedLanguage.PYTHON:\\\\\n        return f"pip install {' '.join(libraries)}"\\\\\n    elif lang == SupportedLanguage.JAVA:\\\\\n        return f"mvn install:install-file -Dfile={' '.join(libraries)}"\\\\\n    elif lang == SupportedLanguage.JAVASCRIPT:\\\\\n        return f"yarn add {' '.join(libraries)}"\\\\\n    elif lang == SupportedLanguage.CPP:\\\\\n        return f"apt-get install {' '.join(libraries)}"\\\\\n    elif lang == SupportedLanguage.GO:\\\\\n        return f"go get {' '.join(libraries)}"\\\\\n    elif lang == SupportedLanguage.RUBY:\\\\\n        return f"gem install {' '.join(libraries)}"\\\\\n    else:\\\\\n        raise ValueError(f"Language {lang} is not supported")\\\"\\\"\\\\\n\\\\ndef get_code_file_extension(lang: str) -> str:\\\"""\\\\\nGet the file extension for the given language\\\\\n:param lang: Programming language\\\\\n:return: File extension\\\"\\\"\\\\\n    if lang == SupportedLanguage.PYTHON:\\\\\n        return "py"\\\\\n    elif lang == SupportedLanguage.JAVA:\\\\\n        return "java"\\\\\n    elif lang == SupportedLanguage.JAVASCRIPT:\\\\\n        return "js"\\\\\n    elif lang == SupportedLanguage.CPP:\\\\\n        return "cpp"\\\\\n    elif lang == SupportedLanguage.GO:\\\\\n        return "go"\\\\\n    elif lang == SupportedLanguage.RUBY:\\\\\n        return "rb"\\\\\n    else:\\\\\n        raise ValueError(f"Language {lang} is not supported")\\\"\\\"\\\\\n\\\\ndef get_code_execution_command(lang: str, code_file: str) -> str:\\\"""\\\\\nGet the command to execute the code\\\\\n:param lang: Programming language\\\\\n:param code_file: Path to the code file\\\\\n:return: Execution command\\\"\\\"\\\\\n    if lang == SupportedLanguage.PYTHON:\\\\\n        return f"python {code_file}"\\\\\n    elif lang == SupportedLanguage.JAVA:\\\\\n        return f"java {code_file}"\\\\\n    elif lang == SupportedLanguage.JAVASCRIPT:\\\\\n        return f"node {code_file}"\\\\\n    elif lang == SupportedLanguage.CPP:\\\\\n        return f"./{code_file}"\\\\\n    elif lang == SupportedLanguage.GO:\\\\\n        return f"go run {code_file}"\\\\\n    elif lang == SupportedLanguage.RUBY:\\\\\n        return f"ruby {code_file}"\\\\\n    else:\\\\\n        raise ValueError(f"Language {lang} is not supported")\\\"\\\"\\\""